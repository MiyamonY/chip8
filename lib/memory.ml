open StdLabels
open Util

let memory  = Array.init 4096 ~f:(fun _ -> 0)
let splite_addr = 0x050

let fontsets = [|
  [|0xF0; 0x90; 0x90; 0x90; 0xF0|];
  [|0x20; 0x60; 0x20; 0x20; 0x70|];
  [|0xF0; 0x10; 0xF0; 0x80; 0xF0|];
  [|0xF0; 0x10; 0xF0; 0x10; 0xF0|];
  [|0x90; 0x90; 0xF0; 0x10; 0x10|];
  [|0xF0; 0x80; 0xF0; 0x10; 0xF0|];
  [|0xF0; 0x80; 0xF0; 0x90; 0xF0|];
  [|0xF0; 0x10; 0x20; 0x40; 0x40|];
  [|0xF0; 0x90; 0xF0; 0x90; 0xF0|];
  [|0xF0; 0x90; 0xF0; 0x10; 0xF0|];
  [|0xF0; 0x90; 0xF0; 0x90; 0x90|];
  [|0xE0; 0x90; 0xE0; 0x90; 0xE0|];
  [|0xF0; 0x80; 0x80; 0x80; 0xF0|];
  [|0xE0; 0x90; 0x90; 0x90; 0xE0|];
  [|0xF0; 0x80; 0xF0; 0x80; 0xF0|];
  [|0xF0; 0x80; 0xF0; 0x80; 0x80|];|]

let load_game file =
  let ic = open_in_bin file in
  try
    let rec loop i =
      let byte = input_byte ic in
      memory.(i) <- byte;
      loop @@ succ i in
    loop 0x200
  with
  | End_of_file -> close_in ic
  | e ->
    let msg = Printexc.to_string e
    and stack = Printexc.get_backtrace () in
    Printf.eprintf "there was an error: %s%s\n" msg stack;
    close_in_noerr ic;
    raise e

let initialize_memory () =
  Array.iteri fontsets ~f:(fun i fontset ->
      Array.iteri fontset ~f:(fun j v ->
          memory.(splite_addr + i * (Array.length fontset) + j) <- v
        )
    )
